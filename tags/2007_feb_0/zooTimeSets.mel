//
// time sets menu
//
// Created by Hamish McKenzie zootoolbox@googlegroups.com
// Created : 28 December 2002
//
// Description:
// this script is useful for those of us who either like to, or need
// to, have multiple animations, or even shots, within the one scene
// file.  it creates and remembers "time sets", which can easily be
// jumped to and from, using either the control window, or the time
// sets marking menu.
//
// Usage:
//  assign this function to a key press:
//	zooTimeSets;
//
//  assign this function to the release;
//	zooTimeSetsKillUI;
//
// NOTE: if the hotkey you want to assign this script to contains
// either ctrl, alt or shift, then modify the "popupMenu" line below
// to reflect which key is used (ie if you're using alt-w then
// change it to -alt 1).
//
// Hamish McKenzie ©2007...
// macaroniKazoo Productions ©2007...


global proc zooTimeSets() {
	global int $zooIsClicked;
	string $panel = `getPanel -up`;

	$zooIsClicked = 0;
	if( `popupMenu -ex tempMM` ) deleteUI tempMM;

	if( !`control -ex $panel` ) $panel = "viewPanes";
	popupMenu -ctl 0 -alt 0 -sh 0 -mm 1 -b 1 -aob 0 -p $panel -pmc ( "zooTimeSetsCreateUI tempMM" ) tempMM;
	}


global proc zooTimeSetsCreateUI ( string $parent ) {
	global int $zooIsClicked;
	string $timeSetsNode = `zooTimeSetsDefaultNode`;
	string $attrList[] = {};
	string $ranges[] = {};
	int $doesShotsExist = `exists zooShotsUtils`;
	int $i = 0;

	setParent -m $parent;
	popupMenu -e -dai $parent;

	$zooIsClicked = 1;
	if( $timeSetsNode != "" ) {
		$attrList = `listAttr -unlocked -userDefined $timeSetsNode`;
		for ( $attr in $attrList ) {
			string $buffer[] = {};

			tokenize $attr "^" $buffer;
			$ranges[$i] = $buffer[0];
			$i++;
			}
		}

	menuItem -l "editor window" -command ( "zooTimeSetsWindow" ) -rp "N";
	menuItem -l "selected range" -command ( "zooTimeSetsGoToSelectedTime" ) -rp "E";
	menuItem -l "frame playback range" -command ( "zooTimeSetsFrameTime" ) -rp "W";
	for ( $range in $ranges ) menuItem -l $range -command ( "zooTimeSetsGoto both " + $range );
	if( $doesShotsExist ) menuItem -l "timeline to current shot" -c( "zooShotsGoto both ((int)`zooGetCurrentShot`)" ) -rp NE;

	menuItem -d 1;
	menuItem -l "Help..." -command ( "zooTimeSetsHelp help" );
	menuItem -l "About" -command ( "zooTimeSetsHelp about" );
	}


//this proc returns the name of the current default time sets node.  an empty string is returned if no node in the scene exists
global proc string zooTimeSetsDefaultNode() {
	string $savedDefault = `optionVar -q zooTimeSetsSelectedNode`;
	string $zooTimeSetsNodes[] = `zooTimeSetsGetNodes`;
	string $defaultTimeSet = "";

	if( `size $zooTimeSetsNodes` > 0 ) {
		if( `objExists $savedDefault` ) $defaultTimeSet = $savedDefault;
		else $defaultTimeSet = $zooTimeSetsNodes[0];
		}

	return $defaultTimeSet;
	}


global proc zooTimeSetsWindow() {
	string $windowName = "zooTimeSetsWindow";
	string $windowTitle = "zooTimeSets v" + `zooTimeSetsInfo version` + "   ::macaroniKazoo::";
	int $dockUI = `optionVar -ex zooTimeSetsDocking`? `optionVar -q zooTimeSetsDocking`: 0;
	int $isReorderInstalled = `exists zooReorderAttribs`;
	int $isDefaultFrame = ( `optionVar -q zooTimeSetsDefaultBehaviour` == "zooTimeSetsFrame" )? 1: 0;
	int $isDefaultEditor = !$isDefaultFrame;

	if( `window -ex $windowName` ) deleteUI $windowName;
	if( `menuBarLayout -ex zooTimeSetsMenu` ) {
		deleteUI zooTimeSetsMenu;
		eval( "showChannelsLayers \"Channel Box / Layer Editor\" 0" );
		}


	if( $dockUI ) setParent ChannelsLayersPaneLayout;
	else window -resizeToFitChildren 1 -maximizeButton 0 -sizeable 1 -title $windowTitle -toolbox 0 $windowName;

	menuBarLayout zooTimeSetsMenu;
		menu -label "File";
			menuItem -l "Refresh" -c( "zooTimeSetsWindowFunctions update n" );
			if( $dockUI ) menuItem -l "Close" -c( "deleteUI zooTimeSetsMenu; showChannelsLayers \"Channel Box / Layer Editor\" 0;" );
		menu -label "Misc";
			menuItem -l "Dock to Channel Box" -cb $dockUI -c ( "optionVar -iv zooTimeSetsDocking `menuItem -q -checkBox zooTimeSetsCheckDocking`" ) zooTimeSetsCheckDocking;
		menu -label "Press Behaviour";
			menuItem -l "Editor Window" -cb $isDefaultEditor -c( "optionVar -rm zooTimeSetsDefaultBehaviour; menuItem -e -checkBox 1 zooTimeSetsEditor; menuItem -e -checkBox 0 zooTimeSetsFrame;" ) zooTimeSetsEditor;
			menuItem -l "Frame Selected Range" -cb $isDefaultFrame -c( "optionVar -sv zooTimeSetsDefaultBehaviour zooTimeSetsFrame; menuItem -e -checkBox 0 zooTimeSetsEditor; menuItem -e -checkBox 1 zooTimeSetsFrame;" ) zooTimeSetsFrame;

	if( $dockUI ) scrollLayout -childResizable 1 -hst 0 -vst 1 zooTimeSetsScrollBar;
		formLayout zooTimeSetsForm;
			scriptJob -p zooTimeSetsForm -e "SceneOpened" "zooTimeSetsWindowFunctions update n";
			columnLayout -adjustableColumn 1 -rowSpacing 5 zooTimeSetsColumnMain;
				formLayout zooTimeSetsFormSetsList;
					text -label "zooTimeSets nodes:" zooTimeSetsTextNodes;
					optionMenu -label "" -width 170 -changeCommand ( "optionVar -sv zooTimeSetsSelectedNode `optionMenu -q -v zooTimeSetsOptionNodes`; zooTimeSetsWindowFunctions update n" ) zooTimeSetsOptionNodes;
					button -l "select" -c ( "select `optionMenu -q -v zooTimeSetsOptionNodes`" ) zooTimeSetsButtonSelectNode;
					setParent ..;

				formLayout -edit
					-af zooTimeSetsTextNodes "top" 1
					-af zooTimeSetsTextNodes "left" 1

					-af zooTimeSetsOptionNodes "top" 1
					-ac zooTimeSetsOptionNodes "left" 1 zooTimeSetsTextNodes
					-ac zooTimeSetsOptionNodes "right" 1 zooTimeSetsButtonSelectNode

					-af zooTimeSetsButtonSelectNode "top" 1
					-af zooTimeSetsButtonSelectNode "right" 1
					zooTimeSetsFormSetsList;

				formLayout zooTimeSetsFormNew;
					string $text = `text -l "new:"`;
					textField -height 20 -text "" zooTimeSetsTextFieldNewName;
					intField -width 30 -v ( `playbackOptions -q -min` ) -height 20 zooTimeSetsIntFieldNewStart;
					intField -width 30 -v ( `playbackOptions -q -max` ) -height 20 zooTimeSetsIntFieldNewEnd;
					string $button = `button -height 20 -label "create" -c ( "zooTimeSetsWindowFunctions createRange n" )`;
					setParent ..;

				formLayout -edit
					-af $text "top" 0
					-af $text "left" 0

					-af zooTimeSetsTextFieldNewName "top" 0
					-ac zooTimeSetsTextFieldNewName "left" 0 $text
					-ac zooTimeSetsTextFieldNewName "right" 0 zooTimeSetsIntFieldNewStart

					-af zooTimeSetsIntFieldNewStart "top" 0
					-ac zooTimeSetsIntFieldNewStart "right" 0 zooTimeSetsIntFieldNewEnd

					-af zooTimeSetsIntFieldNewEnd "top" 0
					-ac zooTimeSetsIntFieldNewEnd "right" 0 $button

					-af $button "top" 0
					-af $button "right" 0
					zooTimeSetsFormNew;

				columnLayout -adjustableColumn 1 zooTimeSetsRowList;
					setParent ..;

				string $buttonsForm = `formLayout`;
					string $buttSelectRange = `button -label "Frame Selected Range" -c ( "zooTimeSetsGoToSelectedTime" )`;
					string $buttReorder = `button -enable $isReorderInstalled -label "Reorder" -c ( "select zooTimeSets; zooReorderAttribs; checkBox -e -v 0 zooReorderAttribsCheckKeyable; zooReorderAttribsWindowFunctions update" )`;
					setParent ..;

				formLayout -e
					-af $buttSelectRange "left" 0
					-ap $buttSelectRange "right" 0 60
					-af $buttSelectRange "bottom" 0

					-ac $buttReorder "left" 0 $buttSelectRange
					-af $buttReorder "right" 0
					-af $buttReorder "bottom" 0
					$buttonsForm;

				setParent ..;

			string $image = `image -width 260 -height 8 -backgroundColor ((float)96/255) ((float)100/255) ((float)146/255) -image(zooGetFileLocation(zooListEnv("XBMLANGPATH"),"zoo_sig","tga") +"zoo_sig.tga" ) zooTimeSetsImageSig`;
			popupMenu -p $image -b 1 -pmc ( "showHelp -a \"http://www.macaronikazoo.com/\"" );
			setParent ..;
		setParent ..;

	formLayout -edit
		-af zooTimeSetsColumnMain "top" 1
		-af zooTimeSetsColumnMain "left" 1
		-af zooTimeSetsColumnMain "right" 1
		-ac zooTimeSetsColumnMain "bottom" 1 zooTimeSetsImageSig

		-af zooTimeSetsImageSig "left" 1
		-af zooTimeSetsImageSig "right" 1
		-af zooTimeSetsImageSig "bottom" 1
		zooTimeSetsForm;

	if( $dockUI ) paneLayout -e -cn "horizontal3" -setPane zooTimeSetsMenu 3 -paneSize 1 100 55 -paneSize 2 100 25 -paneSize 3 100 20 ChannelsLayersPaneLayout;
	else showWindow $windowName;

	zooTimeSetsWindowFunctions update n;
	}


global proc zooTimeSetsWindowFunctions ( string $function, string $variable01 ) {
	string $timeSetsNode = `zooTimeSetsDefaultNode`;
	string $windowName = "zooTimeSetsWindow";
	string $UIParent = "zooTimeSetsRowList";
	switch ( $function ) {
		case "update":
			string $timeSetsNodes[] = `zooTimeSetsGetNodes`;
			string $default = `zooTimeSetsDefaultNode`;
			int $selection = 1;
			int $n = 1;

			//delete all UI info currently in the window
			if( size(`optionMenu -q -ils zooTimeSetsOptionNodes`)) deleteUI `optionMenu -q -ils zooTimeSetsOptionNodes`;
			if( size(`columnLayout -q -ca zooTimeSetsRowList`)) deleteUI `columnLayout -q -ca zooTimeSetsRowList`;

			//if no time sets nodes exist, create one
			if( `size $timeSetsNodes` == 0 ) {
				zooTimeSetsWindowFunctions createNode n;
				$timeSetsNodes = `zooTimeSetsGetNodes`;
				optionVar -sv zooTimeSetsSelectedNode $timeSetsNodes[0];
				}

			for( $node in $timeSetsNodes ) {
				menuItem -label $node -p zooTimeSetsOptionNodes;
				if( $node == $default ) $selection = $n;
				else $n++;
				}

			zooTimeSetsWindowFunctions load n;
			optionMenu -e -select $selection zooTimeSetsOptionNodes;
			break;

		case "load":
			if( `objExists $timeSetsNode` ) {
				string $attrList[] = `listAttr -unlocked -userDefined $timeSetsNode`;
				for( $attr in $attrList ) {
					string $attrValue = `getAttr ( $timeSetsNode + "." + $attr )`;
					zooTimeSetsWindowFunctions add $attrValue;
					}
				}
			break;

		case "save":
			if( `objExists $timeSetsNode` ) {
				string $rangeList[] = `columnLayout -q -childArray $UIParent`;
				string $attrList[] = `listAttr -unlocked -userDefined $timeSetsNode`;
				int $n = 0;

				for( $attr in $attrList ) deleteAttr ( $timeSetsNode + "." + $attr );
				for( $range in $rangeList ) {
					string $infoList[] = `formLayout -q -childArray $range`;
					string $rangeName = `textField -q -text $infoList[1]`;
					string $start = `intField -q -v $infoList[3]`;
					string $end = `intField -q -v $infoList[4]`;
					string $rangeString = ( $rangeName + "^" + $start + "^" + $end );

					addAttr -ln $rangeName -dt "string" $timeSetsNode;
					setAttr -type "string" ( $timeSetsNode + "." + $rangeName ) $rangeString;
					}
				}
			break;

		case "createNode":
			string $selObjs[] = `ls -sl`;
			string $nodeName = `createNode time -n zooTimeSets`;

			addAttr -at bool -ln "zooTimeSets" $nodeName;
			setAttr -l 1 ( $nodeName + ".zooTimeSets" );
			select $selObjs;
			break;

		case "createRange":
			string $rangeName = `textField -q -text zooTimeSetsTextFieldNewName`;
			int $start = `intField -q -v zooTimeSetsIntFieldNewStart`;
			int $end = `intField -q -v zooTimeSetsIntFieldNewEnd`;

			textField -e -text "" zooTimeSetsTextFieldNewName;
			intField -e -v 0 zooTimeSetsIntFieldNewStart;
			intField -e -v 0 zooTimeSetsIntFieldNewEnd;
			zooTimeSetsWindowFunctions add ( $rangeName + "^" + $start + "^" + $end );
			zooTimeSetsWindowFunctions save n;
			break;

		case "add":
			string $rangeInfo = $variable01;
			string $buffer[] = {};

			tokenize $rangeInfo "^" $buffer;
			string $rangeName = $buffer[0];
			int $start = $buffer[1];
			int $end = $buffer[2];

			setParent zooTimeSetsRowList;
			string $form = `formLayout ( "zooTimeSetsFormRange_" + $rangeName )`;
				string $goToButton = `button -width 25 -label "<o>" -c ( "zooTimeSetsGoto both " + $rangeName ) ( "zooTimeSetsButtonGoto_" + $rangeName )`;
				string $rangeInput = `textField -text $rangeName -cc ( "zooTimeSetsWindowFunctions rename " + $rangeName ) ( "zooTimeSetsTextFieldName_" + $rangeName )`;
				string $startGoto = `button -width 12 -l "<" -c ( "zooTimeSetsGoto start " + $rangeName )`;
				string $startTime = `intField -width 30 -v $start -cc ( "zooTimeSetsWindowFunctions save n" ) ( "zooTimeSetsIntFieldStart_" + $rangeName )`;
				string $endTime = `intField -width 30 -v $end -cc ( "zooTimeSetsWindowFunctions save n" ) ( "zooTimeSetsIntFieldEnd_" + $rangeName )`;
				string $endGoto = `button -width 12 -l ">" -c ( "zooTimeSetsGoto end " + $rangeName )`;
				string $deleteRange = `button -width 25 -label "del" -c ( "zooTimeSetsWindowFunctions delete " + $rangeName ) ( "zooTimeSetsButtonDelete_" + $rangeName )`;
				setParent..;

			formLayout -e
				-af $goToButton "top" 0
				-af $goToButton "left" 0

				-af $rangeInput "top" 0
				-ac $rangeInput "left" 0 $goToButton
				-ac $rangeInput "right" 0 $startGoto

				-af $startGoto "top" 0
 				-ac $startGoto "right" 0 $startTime

				-af $startTime "top" 0
				-ac $startTime "right" 0 $endTime

				-af $endTime "top" 0
				-ac $endTime "right" 0 $endGoto

				-af $endGoto "top" 0
				-ac $endGoto "right" 0 $deleteRange

				-af $deleteRange "top" 0
				-af $deleteRange "right" 0
				$form;

			popupMenu -p $startTime;
				menuItem -l "set start time" -c ( "zooTimeSetsGoto start " + $rangeName );
				setParent ..;

			popupMenu -p $endTime;
				menuItem -l "set end time" -c ( "zooTimeSetsGoto end " + $rangeName );
				setParent ..;
			break;

		case "rename":
			string $oldName = $variable01;
			string $newName = `textField -q -text ( "zooTimeSetsTextFieldName_" + $oldName )`;

			if( $newName != $oldName ) {
				renameUI ( "zooTimeSetsFormRange_" + $oldName ) ( "zooTimeSetsFormRange_" + $newName );
				renameUI ( "zooTimeSetsButtonGoto_" + $oldName ) ( "zooTimeSetsButtonGoto_" + $newName );
				renameUI ( "zooTimeSetsTextFieldName_" + $oldName ) ( "zooTimeSetsTextFieldName_" + $newName );
				renameUI ( "zooTimeSetsIntFieldStart_" + $oldName ) ( "zooTimeSetsIntFieldStart_" + $newName );
				renameUI ( "zooTimeSetsIntFieldEnd_" + $oldName ) ( "zooTimeSetsIntFieldEnd_" + $newName );
				renameUI ( "zooTimeSetsButtonDelete_" + $oldName ) ( "zooTimeSetsButtonDelete_" + $newName );

				button -e -c ( "zooTimeSetsGoto both " + $newName ) ( "zooTimeSetsButtonGoto_" + $newName );
				textField -e -text $newName ( "zooTimeSetsTextFieldName_" + $newName );
				textField -e -cc ( "zooTimeSetsWindowFunctions rename " + $newName ) ( "zooTimeSetsTextFieldName_" + $newName );
				button -e -c ( "zooTimeSetsWindowFunctions delete " + $newName ) ( "zooTimeSetsButtonDelete_" + $newName );
				}

			zooTimeSetsWindowFunctions save n;
			break;

		case "delete":
			if( `objExists $timeSetsNode` ) {
				string $rangeName = $variable01;
				deleteUI ( "zooTimeSetsFormRange_" + $rangeName );
				zooTimeSetsWindowFunctions save n;
				}
			break;
		}
	}


global proc zooTimeSetsGoto ( string $function, string $rangeName ) {
	string $timeSetsNode = `zooTimeSetsDefaultNode`;
	string $rangeInfo = `getAttr ( $timeSetsNode + "." + $rangeName )`;
	string $rangeName;
	int $start;
	int $end;
	string $buffer[] = {};

	tokenize $rangeInfo "^" $buffer;
	$rangeName = $buffer[0];
	$start = $buffer[1];
	$end = $buffer[2];

	if( $function == "start" || $function == "both" ) playbackOptions -e -min $start;
	if( $function == "end" || $function == "both" ) playbackOptions -e -max $end;
	if( `currentTime -q` < $start ) currentTime $start;
	if( `currentTime -q` > $end ) currentTime $end;
	}


//only proceed if a range has been selected.
//this can be determined if the end range is more than one unit greater than the start range.
global proc zooTimeSetsGoToSelectedTime() {
	float $selectedTimeRange[2] = `zooGetSelectedRange`;
	if( $selectedTimeRange[1] != $selectedTimeRange[0] ) playbackOptions -min $selectedTimeRange[0] -max $selectedTimeRange[1];
	else playbackOptions -min `playbackOptions -q -ast` -max `playbackOptions -q -aet`;
	}


global proc string[] zooTimeSetsGetNodes() {
	string $potentialNodes[] = `ls -type time`;
	string $zooTimeSetsNodes[] = {};
	int $n = 0;

	for( $obj in $potentialNodes ) {
			if( `objExists ( $obj + ".zooTimeSets" )` || `objExists ( $obj + ".zzTimeSets" )` ) {
			$zooTimeSetsNodes[$n] = $obj;
			$n++;
			}
		}

	return $zooTimeSetsNodes;
	}


global proc zooTimeSetsKillUI() {
	global int $zooIsClicked;
	string $currentEditor = `getPanel -up`;

	if( `popupMenu -ex tempMM` ){
		deleteUI tempMM;
		if ( $zooIsClicked ) $zooIsClicked = 0;
		else {
			if( `optionVar -q zooTimeSetsDefaultBehaviour` == "zooTimeSetsFrame" ) {
				if( $currentEditor == "graphEditor1" || $currentEditor == "dopeSheetPanel1" ) zooTimeSetsFrameTime;
				else zooTimeSetsGoToSelectedTime;
				}
			else zooTimeSetsWindow;
			}
		}
	}


global proc zooTimeSetsFrameTime() {
	string $currentEditor = `getPanel -wf`;
	if( $currentEditor == "graphEditor1" ) $currentEditor = "graphEditor1GraphEd";
	if( $currentEditor == "dopeSheetPanel1" ) $currentEditor = "dopeSheetPanel1DopeSheetEd";
	if( $currentEditor == "dopeSheetPanel1DopeSheetEd" ) animView -startTime ( `playbackOptions -q -minTime` - 1 ) -endTime ( `playbackOptions -q -maxTime` + 1 ) $currentEditor;
	if( $currentEditor == "graphEditor1GraphEd" ) {
		//determine min max key values in time range
		string $objs[] = `selectionConnection -q -obj graphEditor1FromOutliner`;
		float $start = `playbackOptions -q -minTime` - 1;
		float $end = `playbackOptions -q -maxTime` + 1;
		float $keys[] = sort(`keyframe -t( $start +":"+ $end ) -q -vc $objs`);
		float $minVal = $keys[0];
		float $maxVal = $keys[(`size $keys`-1)];
		float $range = $maxVal - $minVal;

		$range *= 0.15;
		$minVal -= $range;
		$maxVal += $range;
		animView -startTime $start -endTime $end -min $minVal -max $maxVal $currentEditor;
		}
	}


global proc string zooTimeSetsInfo ( string $function ) {
	string $creationDate = "28 December 2002";
	string $currentVersion = "1.6.1";

	if( $function == "created" ) $info = $creationDate;
	if( $function == "version" ) $info = $currentVersion;
	return $info;
	}


global proc string[] zooTimeSetsDependencies( string $mode ) {
	string $melDependencies[] = {};
	string $helpDependencies[] = {};
	string $iconDependencies[] = {};
	string $return[] = {};

	$melDependencies[( `size $melDependencies` )] = "zooHelp";
	$melDependencies[( `size $melDependencies` )] = "zooUtils";
	$iconDependencies[( `size $iconDependencies` )] = "zoo_sig.tga";

	if( $mode == "-scripts" ) $return = $melDependencies;
	if( $mode == "-docs" ) $return = $helpDependencies;
	if( $mode == "-icons" ) $return = $iconDependencies;
	return $return;
	}


//zoo.end
//macaroniKazoo ©2007