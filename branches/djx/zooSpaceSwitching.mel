zooArrays_str;
zooAttrUtils;
zooFlags;
zooObjMenuUtils;
zooTriggeredUtils;
zooStrUtils;
zooUtils;
zooKeyUtils;

// DJ MOD
//	Add zooJumpPrevention
//	Add "constraint type" options (work in progress)

global proc zooSpaceSwitching() {
	return;
	}

global proc string[] zooBuildSpaceSwitch( string $src, string $space, string $tgts[], string $names[], string $optionStr ) {
	string $conditions[] = {};
	string $flags[] = `zooListFlags $optionStr`;

	for( $n=0; $n<`size $tgts`; $n++ ) $conditions[$n] = `zooAddSpaceSwitch $src $space $tgts[$n] $names[$n] $optionStr`;
	return $conditions;
	}


global proc string zooAddSpaceSwitch( string $src, string $space, string $tgt, string $name, string $optionStr ) {
	string $temp[] = {};
	string $cmd[];
	string $mo = "-mo";
	string $skipTranslates[] = {};
	string $skipRotates[] = {};
	string $skipScales[] = {};
	string $parentAttrNode = $src;
	
	int $parentConstraint = 0;
	int $pointConstraint = 0;
	int $orientConstraint = 0;
	int $scaleConstraint = 0;

	$temp = `zooGetFlagArguments $optionStr mo`; if( $temp[0] != "" ) if( $temp[0] == "0" ) $mo = "";
	$temp = `zooGetFlagArguments $optionStr st`; if( `size $temp` ) $skipTranslates = $temp;
	$temp = `zooGetFlagArguments $optionStr sr`; if( `size $temp` ) $skipRotates = $temp;
	$temp = `zooGetFlagArguments $optionStr ss`; if( `size $temp` ) $skipScaless = $temp;
	$temp = `zooGetFlagArguments $optionStr parentAttrNode`; if( $temp[0] != "" ) if( `objExists $temp[0]` ) $parentAttrNode = $temp[0];
	$temp = `zooGetFlagArguments $optionStr parentConstraint`; if( $temp[0] != "" ) $parentConstraint = $temp[0];
	$temp = `zooGetFlagArguments $optionStr pointConstraint`; if( $temp[0] != "" ) $pointConstraint = $temp[0];
	$temp = `zooGetFlagArguments $optionStr orientConstraint`; if( $temp[0] != "" ) $orientConstraint = $temp[0];
	$temp = `zooGetFlagArguments $optionStr scaleConstraint`; if( $temp[0] != "" ) $scaleConstraint = $temp[0];
	
	//print("parent = "+$parentConstraint+"\n");
	//print("point = "+$pointConstraint+"\n");
	//print("orient = "+$orientConstraint+"\n");
	//print("scale = "+$scaleConstraint+"\n");
	//print("size cmd = "+size($cmd)+"\n");
	
	if($parentConstraint + $pointConstraint + $orientConstraint + $scaleConstraint == 0) $parentConstraint = 1;
	
	if( $parentConstraint ) $cmd[size($cmd)] = "parentConstraint";
	if( $pointConstraint ) $cmd[size($cmd)]  = "pointConstraint";
	if( $orientConstraint ) $cmd[size($cmd)] = "orientConstraint";
	if( $scaleConstraint ) $cmd[size($cmd)]  = "scaleConstraint";

	//verify that all space objects exist - if not this proc will automatically exclude them from the space switch
	string $clnSrcName = `match "[^|:]+$" $src`;

	if( !`objExists $src` ) return "";
	if( !`objExists $tgt` ) return "";
	if( !`objExists $space` ) return "";
	if( $name == "" ) $name = $tgt;
	zooAttrState "-attrs t r -k 1 -l 0" $space;

	//get the names for the parents from the parent enum attribute
	string $cmdOptionStr = $mo;
	if( `objExists ( $parentAttrNode +".parent" )`) {
		string $attrStr = "";
		string $names[] = {};

		zooGetSpaceTargetsNames $src {} $names;
		$attrStr = `zooArrayToStr_str $names ":"`;
		$attrStr += ":"+ $name +":";
		addAttr -e -enumName $attrStr ( $parentAttrNode +".parent" );

		//if we're building a pointConstraint instead of a parent constraint AND we already
		//have spaces on the object, we need to turn the -mo flag off regardless of what the
		//user set it to, as the pointConstraint maintain offset has different behaviour to
		//the parent constraint
		if( $pointConstraint || $orientConstraint ) $cmdOptionStr = "";
		}
	else addAttr -k 1 -ln parent -at "enum" -en $name $parentAttrNode;

	//now build the constraint
	// DJ MOD - add different constraint type options
	//
	// If multiple constraint types are requested
	// the first sets up the condition node that the others will also use
	//
	string $condition;
	int $lastTarget = 0;
	for($n=0; $n<size($cmd); $n++) {
		string $skipAxisStr = "";
		if($parentConstraint) {
			for( $axis in $skipTranslates ) $skipAxisStr += " -st "+ $axis;
			for( $axis in $skipRotates )    $skipAxisStr += " -sr "+ $axis;
		}
		if($pointConstraint) for( $axis in $skipTranslates ) $skipAxisStr += " -sk "+ $axis;
		if($orientConstraint) for( $axis in $skipRotates )   $skipAxisStr += " -sk "+ $axis;
		if($scaleConstraint) for( $axis in $skipScales )     $skipAxisStr += " -sk "+ $axis;
		
		//print("cmd = " + $cmd[$n] +"\n");
		$constraint[$n] = zooGetElement_str(0,eval( $cmd[$n] +" "+ $cmdOptionStr +" "+ $skipAxisStr +" "+ $tgt +" "+ $space ));

		string $constraintAttrs[] = `listAttr -ud $constraint[$n]`;
		$lastTarget = `size $constraintAttrs`-1;
		string $constraintAttr = $constraint[$n] +"."+ $constraintAttrs[$lastTarget];
		
		if($n == 0) {
			$condition = `shadingNode -asUtility condition -n( "switch_"+ $clnSrcName +"_to_space_"+ $lastTarget )`;

			setAttr ( $condition +".secondTerm" ) $lastTarget;
			setAttr ( $condition +".colorIfTrue" ) 1 1 1;
			setAttr ( $condition +".colorIfFalse" ) 0 0 0;
			connectAttr ( $parentAttrNode +".parent" ) ( $condition +".firstTerm" );
		}
		connectAttr ( $condition +".outColorR" ) $constraintAttr;	
	}

	//find out what symbol to use to find the parent attribute
	string $parentAttrOnStr = "#";
	if( $parentAttrNode != $src ) $parentAttrOnStr = "%"+ `zooAddConnect $src $parentAttrNode `;

	//------
	//add the zooObjMenu commands to the object for easy space switching
	//------
	int $cmdNum = `zooObjMenuAddCmd $src`;
	string $cmdName = "parent to "+ $name;
	
// DJ MOD - call zooSpaceSwitchingKeys before and after zooChangeSpace to set jump prevention keyframe
//
//	string $cmdStr =  "zooFlags;\nzooUtils;\nzooChangeSpace \"-attr parent "+ $lastTarget +"\" "+ $parentAttrOnStr +";";
	string $cmdStr =  "zooFlags;\nzooUtils;\nzooSpaceSwitchingKeys 0 "+$lastTarget+" "+$parentAttrOnStr+";\nzooChangeSpace \"-attr parent "+ $lastTarget +"\" "+ $parentAttrOnStr +";\nzooSpaceSwitchingKeys 1 "+$lastTarget+" "+$parentAttrOnStr+";";

	zooSetObjMenuCmdName $src $cmdName $cmdNum;
	zooSetObjMenuCmdStr $src $cmdStr $cmdNum;

	zooAttrState "-attrs t r -l 1" $space;
	if($scaleConstraint) 	zooAttrState "-attrs s -l 1" $space;

	return $condition;
	}


//------
//removes a target (or space) from a "space switching" object
//------
global proc zooRemoveSpace( string $src, string $tgt ) {
	string $tgts[] = {};
	string $names[] = {};
	string $name = "";
	int $delete = 0;

	zooGetSpaceTargetsNames $src $tgts $names;
	for( $n=0; $n<`size $tgts`; $n++ ) if( $tgts[$n] == $tgt ) $name = $names[$n];
	if( $name == "" ) return;
	if( `size $tgts` == 1 ) $delete = 1;

	string $constraint = `zooFindConstraint $src`;
	string $constraintType = `nodeType $constraint`;
	string $parentAttrOn = `zooFindSpaceAttrNode $src`;
	string $space = `zooFindSpace $src`;
	int $cmds[] = `zooObjMenuListCmds $src`;

	if( $delete ) {
		delete $constraint;
		deleteAttr ( $src +".parent" );
		}
	else eval( $constraintType +" -rm "+ $tgt +" "+ $constraint );
	for( $n=0; $n<`size $cmds`; $n++ ) {
		string $cmdName = `zooGetObjMenuCmdName $src $cmds[$n]`;
		if( $cmdName == ( "parent to "+ $name )) zooRemoveMenu $src $cmds[$n];
		}

	//rebuild the parent attribute
	int $idx = `zooGetIdxOfElement_str $tgts $tgt`;
	clear $names;
	zooGetSpaceTargetsNames $src {} $names;
	if( `size $names` ) addAttr -e -enumName `zooArrayToStr_str $names ":"` ( $parentAttrOn +".parent" );

	//now we need to update the indicies in the right click command
	for( $n=$idx; $n<`size $cmds`; $n++ ) {
		string $cmdName = `zooGetObjMenuCmdName $src $cmds[$n]`;
		if( `match "parent to " $cmdName` != "parent to " ) continue;

		string $cmdStr = `zooGetObjMenuCmdStr $src $cmds[$n]`;
		string $cmdLines[] = {};
		string $lineToks[] = {};

		tokenize $cmdStr ";\n" $cmdLines;
		tokenize $cmdLines[2] " " $lineToks;
		int $parentIdx = `match "^[0-9]+" $lineToks[3]`;
		$parentIdx--;
		$lineToks[3] = `substitute "^[0-9]+" $lineToks[3] ((string)$parentIdx)`;
		$cmdLines[2] = `zooArrayToStr $lineToks " "`;
		string $newCmd = `zooArrayToStr $cmdLines ";\n"` +";";
		zooSetObjMenuCmdStr $src $newCmd $cmds[$n];
		}

	if( !`size $names` ) zooAttrState "-attrs t r -k 1 -l 0" $space;
	}


global proc zooRenameSpace( string $obj, string $oldName, string $newName ) {
	string $names[] = {};
	string $parentAttrOn = `zooFindSpaceAttrNode $obj`;
	int $cmds[] = `zooObjMenuListCmds $obj`;

	for( $cmd in $cmds ) {
		string $cmdName = `zooGetObjMenuCmdName $obj $cmd`;
		if( $cmdName == ( "parent to "+ $oldName )) {
			zooSetObjMenuCmdName $obj ( "parent to "+ $newName ) $cmd;
			break;
			}
		}

	zooGetSpaceTargetsNames $obj {} $names;
	addAttr -e -enumName `zooArrayToStr $names ":"` ( $parentAttrOn +".parent" );
	}


//------
//will return the user specified name given to a particular target object
//------
global proc string zooGetSpaceName( string $src, string $tgt ) {
	string $tgts[] = {};
	string $names[] = {};

	zooGetSpaceTargetsNames $src $tgts $names;
	for( $n=0; $n<`size $tgts`; $n++ ) if( $tgts[$n] == $tgt ) return $names[$n];

	return "";
	}


//------
//this procedure will return arrays containing a list of all targets, and a corresponding
//array holding their user specified names - for the right click menus.  the list of targets
//and names get stored in the arrays $tgt and $names
//------
global proc zooGetSpaceTargetsNames( string $src, string $tgts[], string $names[] ) {
	string $constraint = `zooFindConstraint $src`;
	if( !`objExists $constraint` ) return;

	string $constraintType = `nodeType $constraint`;
	string $space = `zooFindSpace $src`;

	if( !`objExists $constraint` ) return;
	if( !`objExists $space` ) return;

	clear $tgts;
	clear $names;
	string $targetsOnConstraint[] = eval( $constraintType +" -q -tl "+ $constraint );
	int $cmds[] = `zooObjMenuListCmds $src`;
	int $tgtsNum = 0;

	for( $n=0; $n<`size $cmds`; $n++ ) {
		string $cmdName = `zooGetObjMenuCmdName $src $cmds[$n]`;
		string $cmdStr = `zooGetObjMenuCmdStr $src $cmds[$n]`;
		string $cmdLines[] = {};
		string $temp[] = {};
		int $index = 0; //this is the index the parent attribute needs to be set to in order to activate the current target

		// DJ MOD - since I added some extra command lines to the spaceSwitching cmd, (jump prevention stuff)
		// 			we needed to change the next bit so it can still work out what the parent index is
		//			So we will look for the first "-attr parent " and take the integer after it
		//
		if( `match "^parent to " $cmdName` != "parent to " ) continue;	// bail out if it is not a "parent to..." command
		$names[$tgtsNum] = `substring $cmdName 11 (size($cmdName))`;
		
		tokenize $cmdStr "\n" $cmdLines;
		for($c in $cmdLines) {
			//print ("cmd "+$n+": "+$c+"\n");
			if( `match "-attr parent " $c` != "-attr parent " ) continue;	// bail out if cmd does not contain "-attr parent "
			tokenize $c " " $temp;
			break;
		}
		
		// We assume the command looks like this: zooChangeSpace "-attr parent 1" #;
		//
		$index = `match "^[0-9]+" $temp[3]`;
		//print("index = "+$index+"\n");

		$tgts[$tgtsNum] = $targetsOnConstraint[$index];
		$tgtsNum++;
		}
	}


//------
//will return the node being used as the "space node" for any given space switching object
//------
global proc string zooFindSpace( string $obj ) {
	string $constraint = `zooFindConstraint $obj`;
	if( !`objExists $constraint` ) return "";

	string $space[] = `listConnections -type transform -s 0 ( $constraint +".ctx" )`;
	if( !`objExists $space[0]` ) {
		string $future[] = ls("-type","transform",`listHistory -f 1 ( $constraint +".ctx" )`);
		clear $space;
		$space[0] = $future[( `size $future`-1 )];
		}

	if( `objExists $space[0]` ) return $space[0];

	return "";
	}


//------
//will return the name of the constraint node thats controlling the "space node" for any given
//space switching object
//------
global proc string zooFindConstraint( string $obj ) {
	string $parentAttrOn = `zooFindSpaceAttrNode $obj`;
	if( !`objExists $parentAttrOn` ) return "";

	string $conditions[] = `listConnections -type condition -s 0 ( $parentAttrOn +".parent" )`;
	for( $n=0; $n<`size $conditions`; $n++ ) {
		string $constraint[] = `listConnections -type parentConstraint -s 0 ( $conditions[$n] +".outColorR" )`;
		$constraint = zooAddArray_str($constraint,`listConnections -type pointConstraint -s 0 ( $conditions[$n] +".outColorR" )`);
		$constraint = zooAddArray_str($constraint,`listConnections -type orientConstraint -s 0 ( $conditions[$n] +".outColorR" )`);
		if( `objExists $constraint[0]` ) return $constraint[0];
		clear $constraint;
		}

	return "";
	}


global proc string zooFindSpaceAttrNode( string $obj ) {
	string $parentAttrOn = "";
	int $cmds[] = `zooObjMenuListCmds $obj`;

	for( $n=0; $n<`size $cmds`; $n++ ) {
		string $cmdName = `zooGetObjMenuCmdName $obj $cmds[$n]`;
		string $cmdStr = zooPopulateCmdStr($obj,`zooGetObjMenuCmdStr $obj $cmds[$n]`,{});
		string $cmdLines[] = {};

		if( `match "^parent to " $cmdName` != "parent to " ) continue;
		tokenize $cmdStr "\n" $cmdLines;
		$parentAttrOn = `match "[^ ]+$" $cmdLines[3]`;
		$parentAttrOn = `match "^[^;]+" $parentAttrOn`;
		$parentAttrOn = `zooReplaceChars $parentAttrOn "\"" ""`; 	//"	(this comment (specifically the double-quote character) fixes syntax highlighting limitation)
		if( `objExists $parentAttrOn` ) return $parentAttrOn;
		}

	return "";
	}


// DJ MOD
//
global proc zooSpaceSwitchingKeys(int $mode, int $parentNew, string $obj) {
	
	// Check the zooJumpPrevention optionVar
	// Do nothing unless zooJumpPrevention = 1
	// (see zooObjectMenu.mel)
	//
	if(!(`zooJumpPreventionState -1`)) return;

	int $parentCur = `getAttr ($obj +".parent")`;
	
	// debug info
	//print("mode = "+ $mode +"\n");
	
	float $curTime = `currentTime -q`;

	// $mode = 0 before spaceSwitch
	// $mode = 1 after  spaceSwitch
	//
	if($mode == 0) {
		//
		// before space switch...
		//
		// Key $obj at current frame (this temp keyframe will be overwritten after space switch).
		// Delete any existing "jump prevention" keys from the previous frame,
		// then create new ones

		float $prevTime = $curTime -1;
		int $parentAtPrevFrame = `getAttr -t $prevTime ($obj +".parent")`;
		
		if($parentCur != $parentAtPrevFrame) {
			zooChangeSpace ("-attr parent " + $parentAtPrevFrame) $obj;
		}
			
		// clear old "jump prevention" keys from previous frame	
		cutKey -t $prevTime -at t -at r -clear $obj;

		// set temporary keys at current frame (will be rekeyed after space switch)
		setKeyframe -at t -at r -itt linear -ott linear $obj;
		
		// ensure linear tangents (since existing keys that are overwritten retain their existing tangents)
		keyTangent -at t -at r -itt linear -t $curTime $obj;
		
		// set new "jump prevention" keys at prev frame
		//
		zooInsertKeyframe($prevTime, "linear", "linear", $obj, "");
				
	}
	else {
		//
		// after space switch
		//

		// child has been keyed by zooChangeSpace 
		// but ensure linear tangents on object
		//
		keyTangent -lock off -at t -at r -itt linear -ott linear -t $curTime $obj;
	}

}

// DJ MOD - Jump Prevention
//
// When "jump prevention" is enabled and space switching occurs
// then extra keyframes are set for the child object
// at the frame before the space change to avoid a jump in any existing animation curves.
//
// If an animation jump is introduced later (for example the animation of the parents has been changed),
// then you can goto the frame where the space-switch happens and update the jump prevention
// by reselecting the current parent in the RMB object menu.
// (In this case you are not actually changing parent space, but it recalculates the jump prevention keys on the child)
//
// Only translate and rotate keys are affected.
// Non-keyable or locked channels are not affected.



//zoo.end
