zooArrays_str;
zooVectors;
zooFlags;


global string $g_roos[] = {"xyz","yzx","zxy","xzy","yxz","zyx"};

// DJ MOD	- Friday, 8 May 2009
//	Fix problem in zooAlignIK() where (in m2009) the armControl (ikHandle) ignores the move (or xform) cmd that should align it.
//	Add zooAlignLegIKToRoll() to be used by "switch ik to roll" foot control obj menu
//	Add zooAlignLegRollToIK() to be used by "switch roll to ik" foot control obj menu

//------
//this general purpose proc aligns two objects - it uses parent constraint (on an intermediate object) so its rotation order independent
//------
global proc zooAlign( string $optionStr ) {
	//------
	//parse optionStr to determine which flags are enabled for this proc
	//------
	string $selObjs[] = `ls -sl`;
	string $temp[] = {};
	string $src = $selObjs[0];
	string $tgts[] = `zooIndexCrop_str $selObjs "1:"`;
	int $pivot = 0;
	int $key = 0;
	int $runPostXfer = 0;
	int $reverse = `zooIsFlag $optionStr "reverse"`;	// DJ MOD - reverse align for roll to IK switch

	$temp = `zooGetFlagArguments $optionStr load`; if( `size $temp` ) if( $temp[0] == "1" ) return;
	$temp = `zooGetFlagArguments $optionStr src`; if( `objExists $temp[0]` ) $src = $temp[0];
	$temp = `zooGetFlagArguments $optionStr tgt`; if( `size $temp` ) $tgts = $temp;
	$temp = `zooGetFlagArguments $optionStr pivot`; if( `size $temp` ) $pivot = $temp[0];
	$temp = `zooGetFlagArguments $optionStr key`; if( `size $temp` ) $key = $temp[0];
	$temp = `zooGetFlagArguments $optionStr postCmds`; if( `size $temp` ) $runPostXfer = $temp[0];

	string $srcPlusTgt[] = `zooAddArray_str {$src} $tgts`;
	for( $tgt in $tgts ) {
		zooAlignFast $src $tgt $key $pivot;
			
		if( $runPostXfer ) {
			string $cmd = `zooGetPostTraceCmd $tgt`;
			if( $cmd != "" ) {
				$cmd = `zooPopulateCmdStr $tgt $cmd $srcPlusTgt`;
				if( catch(eval($cmd)) ) warning( "zooAlign::zooAlign() post align command failed on: "+ $tgt +"\n" );
				else print( "executed post align command on "+ $tgt +"\n" );
			}
		}
	}
}


//------
//this is separated into a separate proc, because its less "user friendly" ie require less syntax to work
//its better to call zooAlign in non speed intensive operations because the syntax for this command may change
//if the scope of the script is expanded in future - ie I add more functionality
//------
global proc zooAlignFast( string $src, string $tgt, int $key, int $pivotOnly ){
	//these two lines check to make sure the objects to be aligned are both transform (or joint) nodes, otherwise, it quits
	if( !`objExists ( $src +".t" )` || !`objExists ( $tgt +".t" )` ) return;
	//
	float $pos[] = `xform -q -ws -rp $src`;
	float $rot[] = `xform -q -ws -ro $src`;

	//create a list of all the axes to look at - we will check all these axes to make sure they're not locked
	//creating a constraint on a locked axis will give us an error
	string $axes[] = { "x","y","z" };
	string $posCmd = "move -a -ws -rpr ";
	string $rotCmd = "rotate -a -ws ";
	string $posAxes = "";
	string $rotAxes = "";

	for( $n=0; $n<3; $n++ ) {
		if( `getAttr -se ( $tgt +".t"+ $axes[$n] )`) $posAxes += "-"+ $axes[$n] +" "+ $pos[$n] +" ";
		if( `getAttr -se ( $tgt +".r"+ $axes[$n] )`) $rotAxes += "-"+ $axes[$n] +" "+ $rot[$n] +" ";
		}

	if( $pivotOnly ) {
		if( strip($posAxes) != "" ) eval( $posCmd + $posAxes + $tgt +".rp "+ $tgt +".sp" );
		}
	else {
		//so if the rotation orders are different, we need to deal with that because the xform cmd doesn't
		int $srcRo = `getAttr ( $src +".ro" )`;
		int $tgtRo = `getAttr ( $tgt +".ro" )`;
		if( $srcRo != $tgtRo ) setAttr ( $tgt +".ro" ) $srcRo;

		//
		if( strip($posAxes) != "" ) eval( $posCmd + $posAxes + $tgt );
		if( strip($rotAxes) != "" ) eval( $rotCmd + $rotAxes + $tgt );

		//now restore the original rotation order
		global string $g_roos[];
		if( $srcRo != $tgtRo ) xform -p 1 -roo $g_roos[$tgtRo] $tgt;
		}

	if( $key ) catch( setKeyframe("-at","t","-at","r",$tgt) );
	}
	
// DJ MOD
// zooAlignLegRollToIK is specifically written for the foot "switch roll to IK" obj menu command
//	It does a standard zooAlign and resets the roll attribute
//	It can also set keyframes at the switch and jump-prevention keys on the frame before <--- NOT YET IMPLEMENTED
//
global proc zooAlignLegRollToIK( string $legControl, string $legIK, string $ballRollPiv, string $optionStr ){
	string $temp[] = {};
	string $rollBallAxis = "z";
	int $key = `zooIsFlag $optionStr "key"`;

	$temp = `zooGetFlagArguments $optionStr rollBallAxis`; if( `size $temp` ) $rollBallAxis = $temp[0];
	
	if(`zooJumpPreventionState -1`) {
		float $curTime = `currentTime -q`;
		float $prevTime = $curTime -1;
		
		// clear old "jump prevention" keys from previous frame	
		cutKey -t $prevTime -at t -at r -at "roll" -at "ballBreaker" -at "twistFoot" -at "toe" -at "bank" -clear $legControl;

		// set temporary keys at current frame (will be rekeyed after space switch)
		setKeyframe -at t -at r -at "roll" -at "ballBreaker" -at "twistFoot" -at "toe" -at "bank" -itt linear -ott linear $legControl;
		
		// ensure linear tangents (since existing keys that are overwritten retain their existing tangents)
		keyTangent -at t -at r -at "roll" -at "ballBreaker" -at "twistFoot" -at "toe" -at "bank" -itt linear -ott linear -weightLock off -lock off -t $curTime $legControl;
		
		// set new "jump prevention" keys at prev frame
		zooInsertKeyframe($prevTime, "linear", "linear", $legControl, "-att tx ty tz rx ry rz roll ballBreaker twistFoot toe bank");
		
	}

	
	zooAlign ("-src "+$legIK+" -tgt "+$legControl);

	setAttr ($legControl+".toe") (-`getAttr ($ballRollPiv+".r"+$rollBallAxis)`);
	setAttr ($legControl+".roll") 0;
	
	// if required, set a keyframe on main channels affecting foot placement
	if($key) {
		setKeyframe -at t -at r -at "roll" -at "ballBreaker" -at "twistFoot" -at "toe" -at "bank" -itt linear -ott linear $legControl;
		keyTangent -at t -at r -at "roll" -at "ballBreaker" -at "twistFoot" -at "toe" -at "bank" -weightLock off -lock off $legControl;
	}	
}

// DJ MOD
// zooAlignLegIKToRoll is specifically written for the foot "switch IK to roll" obj menu command
//
//	WORK IN PROGRESS
//	for now assume:
//		roll rotations are in the z axis on heel ball and toe, but in x for legControl
//		roll is zero before the align
//		considers only the IK x rotation when calculating to roll
//		ground is flat
//
global proc zooAlignLegIKToRoll( string $legControl, string $heelRollPiv, string $ballRollPiv, string $toeRollPiv, string $optionStr ){
	
	int $key = `zooIsFlag $optionStr "key"`;

	// get the attributes we need
	float $lcRotX = `getAttr ($legControl +".rx")`;
	//float $lcToe = `getAttr ($legControl +".toe")`;
	float $bb = `getAttr ($legControl +".ballBreaker")`;
	float $bb0 = `getAttr ($legControl +".ballBreak0")`;
	float $bb1 = `getAttr ($legControl +".ballBreak1")`;
	float $tM = `getAttr ($legControl +".toeMax")`;
	float $roll = `getAttr ($legControl +".roll")`;

	// abort if conditions would produce unacceptable results
	if($roll != 0) {
		warning ("zooAlignLegIKToRoll: "+ $legControl +".roll = "+ $roll +", but must be zero for successful switch, so nothing was done.");
		return;
	}
	
	if(`zooJumpPreventionState -1`) {
		float $curTime = `currentTime -q`;
		float $prevTime = $curTime -1;
		
		// clear old "jump prevention" keys from previous frame	
		cutKey -t $prevTime -at t -at r -at "roll" -at "ballBreaker" -at "twistFoot" -at "toe" -at "bank" -clear $legControl;

		// set temporary keys at current frame (will be rekeyed after space switch)
		setKeyframe -at t -at r -at "roll" -at "ballBreaker" -at "twistFoot" -at "toe" -at "bank" -itt linear -ott linear $legControl;
		
		// ensure linear tangents (since existing keys that are overwritten retain their existing tangents)
		keyTangent -at t -at r -at "roll" -at "ballBreaker" -at "twistFoot" -at "toe" -at "bank" -itt linear -ott linear -weightLock off -lock off -t $curTime $legControl;
		
		// set new "jump prevention" keys at prev frame
		zooInsertKeyframe($prevTime, "linear", "linear", $legControl, "-att tx ty tz rx ry rz roll ballBreaker twistFoot toe bank");
		
	}
	
	// Reverse engineer the roll system to figure out legControl.translate and legControl.roll using a proxy foot
	//	then match legControl to legControlProxy
	//
	string $legControlProxy = `group -empty -n "zooAlignLegIKToRoll_legControlProxy"`;
	string $heelRollPivProxy = `group -empty -n "zooAlignLegIKToRoll_heelRollPivProxy"`;
	string $ballRollPivProxy = `group -empty -n "zooAlignLegIKToRoll_ballRollPivProxy"`;
	string $toeRollPivProxy = `group -empty -n "zooAlignLegIKToRoll_toeRollPivProxy"`;
	
	zooAlignFast $legControl $legControlProxy 0 0;
	zooAlignFast $heelRollPiv $heelRollPivProxy 0 0;
	zooAlignFast $ballRollPiv $ballRollPivProxy 0 0;
	zooAlignFast $toeRollPiv $toeRollPivProxy 0 0;
	
	parent $legControlProxy $ballRollPivProxy;
	parent $ballRollPivProxy $toeRollPivProxy;
	parent $toeRollPivProxy $heelRollPivProxy;
		
	float $flatToe;
	if($lcRotX < 0) {
		// heel
		rotate -os -r (-1.0*$lcRotX) 0 0 $heelRollPivProxy;
		
		float $pos[] = `xform -q -ws -rp $legControlProxy`;
		move -a -ws -rpr $pos[0] $pos[1] $pos[2] $legControl;
		
		$roll = -1.0*$lcRotX*10.0/`getAttr ($legControl +".heelMin")`;
	}
	else if($lcRotX < $bb * $bb0) {
		// ball
		rotate -os -r (-1.0*($lcRotX)) 0 0 $ballRollPivProxy;
		
		float $pos[] = `xform -q -ws -rp $legControlProxy`;
		move -a -ws -rpr $pos[0] $pos[1] $pos[2] $legControl;
		
		$roll = ($lcRotX)*10.0/$tM;		
	}
	else {
		// ball-toe
		rotate -os -r (-1.0 * $tM*linstep($bb0*$bb,$tM,$lcRotX)) 0 0 $toeRollPivProxy;
		rotate -os -r (-1.0 * $bb0*$bb*linstep(0,$bb0*$bb,$lcRotX)*(1-linstep($bb0*$bb,$bb1,$lcRotX))) 0 0 $ballRollPivProxy;
		
		float $pos[] = `xform -q -ws -rp $legControlProxy`;
		move -a -ws -rpr $pos[0] $pos[1] $pos[2] $legControl;
		
		$roll = ($bb0*$bb*linstep(0,$bb0*$bb,$lcRotX)*(1-linstep($bb0*$bb,$bb1,$lcRotX)) + $tM*linstep($bb0*$bb,$tM,$lcRotX))*10.0/$tM;		
	}

	// finish off
	delete $legControlProxy $heelRollPivProxy $ballRollPivProxy $toeRollPivProxy;
	
	setAttr ($legControl +".roll") $roll;
	setAttr ($legControl +".rx") 0;			// assume flat ground
	setAttr ($legControl +".toe") 0;		//
	
	// if required, set a keyframe on main channels affecting foot placement
	if($key) {
		setKeyframe -at t -at r -at "roll" -at "ballBreaker" -at "twistFoot" -at "toe" -at "bank" -itt linear -ott linear $legControl;
		keyTangent -at t -at r -at "roll" -at "ballBreaker" -at "twistFoot" -at "toe" -at "bank" -weightLock off -lock off $legControl;
	}	
}


//does a simple align which basically means it doesn't take into account locked attributes
global proc zooAlignSimple( string $src, string $tgt ){
	global string $g_roos[];
	//these two lines check to make sure the objects to be aligned are both transform (or joint) nodes, otherwise, it quits
	if( !`objExists $src` || !`objExists $tgt` ) return;
	if( !`objExists ( $src +".t" )` || !`objExists ( $tgt +".t" )` ) return;

	float $pos[] = `xform -q -ws -rp $src`;
	float $rot[] = `xform -q -ws -ro $src`;

	int $srcRoo = `getAttr ( $src +".rotateOrder")`;
	int $tgtRoo = `getAttr ( $tgt +".rotateOrder" )`;

	move -rpr $pos[0] $pos[1] $pos[2] $tgt;

	if( $srcRoo == $tgtRoo ) rotate -a -ws $rot[0] $rot[1] $rot[2] $tgt;
	else {
		setAttr ( $tgt +".rotateOrder" ) `getAttr ( $src +".rotateOrder")`;
	rotate -a -ws $rot[0] $rot[1] $rot[2] $tgt;
		xform -p 1 -roo $g_roos[$tgtRoo];
		}
	}


//------
//this proc will align the bones controlled by an ik chain to the fk chain
//flags used:
//-ikHandle  this flag specifies the name of the ikHandle to work on
//-onCmd     this flag tells the script what command to run to turn the ik handle on - it is often left blank because its assumed we're already in ik mode
//-offCmd    this flag holds the command to turn the ik handle off, and switch to fk mode
//NOTE: if the offCmd isn't specified, it defaults to:  if( `getAttr -se #.ikb` ) setAttr #.ikb 0;
//
//symbols to use in cmd strings:
// ^  refers to the ikHandle
//
//example:
//zooAlignFK "-ikHandle ikHandle1 -onCmd setAttr ^.ikBlend 1 -offCmd setAttr ^.ikBlend 0";
//------
global proc zooAlignFK( string $optionStr ) {
	string $temp[] = {};
	string $control;
	string $ikHandle;
	string $onCmd;
	string $offCmd = "if( `getAttr -se ^.ikb` ) setAttr ^.ikb 0;";
	int $alignEnd = 1;

	$temp = `zooGetFlagArguments $optionStr control`; if( `size $temp` ) $control = $temp[0];
	$temp = `zooGetFlagArguments $optionStr ikHandle`; if( `size $temp` ) $ikHandle = $temp[0];
	$temp = `zooGetFlagArguments $optionStr alignEnd`; if( `size $temp` ) $alignEnd = $temp[0];
	$temp = `zooGetFlagArguments $optionStr onCmd`; if( `size $temp` ) $onCmd = `zooArrayToStr_str $temp " "`;
	$temp = `zooGetFlagArguments $optionStr offCmd`; if( `size $temp` ) $offCmd = `zooArrayToStr_str $temp " "`;

	while( `match "#+" $onCmd` != "" ) $onCmd = `substitute "#+" $onCmd $control`;
	while( `match "#+" $offCmd` != "" ) $offCmd = `substitute "#+" $offCmd $control`;

	//the ^ symbol in either the onCmd or the offCmd is used to specify the ikHandle - so we must sub it into the command strings
	while( `match "\\^+" $onCmd` != "" ) $onCmd = `substitute "\\^+" $onCmd $ikHandle`;
	while( `match "\\^+" $offCmd` != "" ) $offCmd = `substitute "\\^+" $offCmd $ikHandle`;

	if( !`ikHandle -ex $ikHandle` ) return;
	if( `size $onCmd` ) eval $onCmd;
	string $joints[] = `ikHandle -q -jl $ikHandle`;
	string $effector = `ikHandle -q -ee $ikHandle`;
	string $effectorCtrl[] = `listConnections -d 0 ( $effector +".tx" )`;

	for( $n=0; $n<`size $joints`; $n++ ) {
		float $rotation[] = `getAttr ( $joints[$n] +".r" )`;
		if( `getAttr -se ( $joints[$n] +".rx" )` ) setKeyframe -at rx -v $rotation[0] $joints[$n];
		if( `getAttr -se ( $joints[$n] +".ry" )` ) setKeyframe -at ry -v $rotation[1] $joints[$n];
		if( `getAttr -se ( $joints[$n] +".rz" )` ) setKeyframe -at rz -v $rotation[2] $joints[$n];
		}

	if( $alignEnd ) zooAlign ( "-key 1 -src "+ $ikHandle +" -tgt "+ $effectorCtrl[0] );
	if( `size $offCmd` ) eval $offCmd;
	}


//------
//this proc will align the IK controller to its fk chain
//flags used:
//-control   this is the actual control being used to move the ikHandle - it is assumed to be the same object as the ikHandle, but if its different (ie if the ikHandle is constrained to a controller) use this flag
//-pole      tells the script the name of the pole controller - if there is no pole vector control, leave this flag out
//-ikHandle  this flag specifies the name of the ikHandle to work on
//-onCmd     this flag tells the script what command to run to turn the ik handle on - it is often left blank because its assumed we're already in ik mode
//-offCmd    this flag holds the command to turn the ik handle off, and switch to fk mode
//NOTE: if the offCmd isn't specified, it defaults to:  if( `getAttr -se ^.ikb` ) setAttr ^.ikb 1;
//
//symbols to use in cmd strings:
// ^  refers to the ikHandle
// #  refers to the control object
//
//example:
//zooAlignIK "-control somObj -ikHandle ikHandle1 -offCmd setAttr #.fkMode 0";
//------
global proc zooAlignIK( string $optionStr ) {
	string $temp[] = {};
	string $control;
	string $pole;
	string $ikHandle;
	string $onCmd;
	string $offCmd = "if( `getAttr -se ^.ikb` ) setAttr ^.ikb 1;";
	int $alignEnd = 1;

	$temp = `zooGetFlagArguments $optionStr control`; if( `size $temp` ) $control = $temp[0];
	$temp = `zooGetFlagArguments $optionStr pole`; if( `size $temp` ) $pole = $temp[0];
	$temp = `zooGetFlagArguments $optionStr ikHandle`; if( `size $temp` ) $ikHandle = $temp[0];
	$temp = `zooGetFlagArguments $optionStr alignEnd`; if( `size $temp` ) $alignEnd = $temp[0];
	$temp = `zooGetFlagArguments $optionStr onCmd`; if( `size $temp` ) $onCmd = `zooArrayToStr_str $temp " "`;
	$temp = `zooGetFlagArguments $optionStr offCmd`; if( `size $temp` ) $offCmd = `zooArrayToStr_str $temp " "`;
	if( !`objExists $control` ) $control = $ikHandle;

	//the ^ symbol in either the onCmd or the offCmd is used to specify the ikHandle - so we must sub it into the command strings
	//likewise for the # symbol which represents the control object
	while( `match "#+" $onCmd` != "" ) $onCmd = `substitute "#+" $onCmd $control`;
	while( `match "#+" $offCmd` != "" ) $offCmd = `substitute "#+" $offCmd $control`;
	while( `match "\\^+" $onCmd` != "" ) $onCmd = `substitute "\\^+" $onCmd $ikHandle`;
	while( `match "\\^+" $offCmd` != "" ) $offCmd = `substitute "\\^+" $offCmd $ikHandle`;

	if( !`ikHandle -ex $ikHandle` ) return;
	if( `size $onCmd` ) eval $onCmd;
	string $joints[] = `ikHandle -q -jl $ikHandle`;
	string $effector = `ikHandle -q -ee $ikHandle`;
	
	string $effectorCtrl[] = `listConnections -d 0 ( $effector +".tx" )`;

	// DJ MOD
	//	Fixes problem where (in m2009?) the armControl (ikHandle) ignores the move (or xform) cmd that should align it.
	//	So we align a sibling locator instead and get its translate and rotate values
	//
	//	requires:
	//		create locator (or empty group) and parent next to armControl_R
	//		match rotation order
	//		addAttr -ln zooLoc -at message armControl_R;
	//		connectAttr -f armControl_R_loc.message armControl_R.zooLoc;
	//
	//zooAlign ( "-src "+ $effectorCtrl[0] +" -tgt "+ $control );
	//
	string $loc[];
	catchQuiet($loc = `listConnections -d 0 ($control+".zooLoc")`);
	if(size($loc)) {
		zooAlign ( "-src "+ $effectorCtrl[0] +" -tgt "+ $loc[0] );
		float $trn[] = `getAttr ($loc[0]+".translate")`;
		float $rot[] = `getAttr ($loc[0]+".rotate")`;
		setAttr ($control+".translate") -type double3 $trn[0] $trn[1] $trn[2];
		setAttr ($control+".rotate") -type double3 $rot[0] $rot[1] $rot[2];
	}
	else {
		// this is the original method (for old rigs)
		zooAlign ( "-src "+ $effectorCtrl[0] +" -tgt "+ $control );
	}
	
	if( `objExists $pole` ) {
		float $pos[] = `zooFindPolePosition ( "-start "+ $joints[0] +" -mid "+ $joints[1] +" -end "+ $effectorCtrl[0] )`;
		move -a -ws -rpr $pos[0] $pos[1] $pos[2] $pole;
		}

	if( `size $offCmd` ) eval $offCmd;
}


//transfers the pose on a child to its parent
global proc zooChildToParent( string $child ) {
	string $sel[] = `ls -sl`;
	string $parent = zooGetElement_str(0,`listRelatives -f -p $child`);
	string $loc = zooGetElement_str(0,`spaceLocator`);

	zooAlign ( "-src "+ $child +" -tgt "+ $loc );
	zooResetAttrs $child;
	zooAlign ( "-src "+ $loc +" -tgt "+ $parent );
	delete $loc;
	select $sel;
	}


global proc string zooGetPostTraceCmd( string $obj ) {
	if( `objExists ( $obj +".xferPostTraceCmd" )`) return `getAttr ( $obj +".xferPostTraceCmd" )`;
	return "";
	}


global proc zooSetPostTraceCmd( string $obj, string $cmd ) {
	if( $cmd == "" ) return;
	if( !`objExists ( $obj +".xferPostTraceCmd" )`) addAttr -dt "string" -ln xferPostTraceCmd $obj;
	setAttr -type "string" ( $obj +".xferPostTraceCmd" ) $cmd;
	}


//zoo.end
